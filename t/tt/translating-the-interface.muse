#title Translating the interface
#cat doc howto
#lang en
#pubdate 2014-11-20T19:35:16

** Technical

*** Adding a new language (developer-only)

Go to =lib/AmuseWikiFarm/I18N= and run (for example to add swedish)

<example>
msginit --input=messages.pot --output=sv.po --locale=sv
</example>

Add the language code and the language string to the =AmuseWikiFarm::Schema::Result::Site::known_langs=
method.

Add the language code to the =script/upgrade_i18n= script.

Add the babel name to =Text::Amuse::_language_mapping= if missing.

*** Enabling the language

Go to =/admin/sites=, edit, set the Locale and/or add the code to the
Multilanguage setting.

*** Technical details

**** Global

GNU gettext message catalogues (.po files) are located at
=lib/AmuseWikiFarm/I18N/xx.po=, where xx is the language code. Changes
done here shouldn’t be site specific and if you improve the
translations, please send the updated .po file to me
(=melmothx@gmail.com=) or fork the amusewiki repo and do a pull request,
making sure you’re aligned to the latest master branch.

**** Local lexicon.json

You can override the UI translations and provide them for the
categories (if your site is multilingual or if you use codes instead
of strings) using the local file
=repo/<site_id>/site_files/lexicon.json=.

The format is as follows (plain JSON):

<example>
  {
     "term" : {
        "hr" : "Term in croatian",
        "en" : "Term in english",
        "it" : "Term in italian"
     },
     "another term [_1]" : {
        "hr" : "Another term in croatian with an argument [_1]",
        "en" : "Another term in english with an argument [_1]",
        "it" : "Another term in italian with an argumetn [_1]"
     }
  }
</example>

The JSON must be correct, otherwise you will not get any translation
out of that. You can use arguments for translations with the <code>[_1]</code>,
<code>[_2]</code> syntax.

Strings are expected to be unescaped (html-wise). The HTML is escaped
back when passed to the template.

To validate the lexicon file prior to upload, use this (somehow
longish) one-liner:

<example>
perl -MJSON -MData::Dumper \
     -e 'open (my $fh, "<:encoding(UTF-8)", "site_files/lexicon.json");
         $/ = undef; my $json = <$fh>;
            print Data::Dumper::Dumper(JSON::from_json($json));'
</example>

If you see the dump of the data structures (an hashref of hashrefs),
you’re good. Otherwise fix the json and retry.


** Translating the interface (for translators/non-tech)

 1. Install [[http://poedit.net/][Poedit]].

 2. Go to [[https://github.com/melmothx/amusewiki/releases]] and download
    the **latest**. Unpack the archive and find the .po file with your
    language code in the =lib/AmuseWikiFarm/I18N= directory.

 3. Open the .po file with Poedit. Add the translations. Please
    preserve the %1, %2, in the message. They are placeholders for
    dynamic content. Save (of course). Send the .po file to
    <code>melmothx (at) gmail (dot) com</code>.

Done.

When a new release comes out, repeat from point 2 (unless you
uninstalled Poedit in the meanwhile).





